(ns intcode.day16
  (:require [clojure.string :as str]))

(defn the-sequence
  [n]
  (->> (concat (take n (repeat 0)) (take n (repeat 1)) (take n (repeat 0)) (take n (repeat -1)))
       cycle
       (drop 1)))

(defn p1
  [input]
  (let [input (->> (str/split input #"")
                   (map #(Integer/parseInt %)))
        len (count input)]
    (->> (reduce
           (fn [acc _]
             (map (fn [i]
                    (-> (Math/abs (reduce + 0 (map * acc (take len (the-sequence (inc i))))))
                        (mod 10)))
                  (range len)))
           input
           (range 100))
         (take 8)
         (str/join ""))))

(def reduce-+-memo
  (memoize
    (fn [acc n]
      (+ (nth acc n)
         (if (zero? n)
           0
           (reduce-+-memo acc (dec n)))))))

(defn p2
  [input shift]
  (let [input (->> input
                   (reverse)
                   (repeat (int (Math/ceil (/ shift (count input)))))
                   (flatten)
                   (map #(Character/digit % 10))
                   (take shift)
                   vec)]
    (->> (reduce
           (fn [acc i]
             (-> (reduce
                   (fn [{:keys [val sum]} j]
                     (let [new-sum (-> (+ sum (nth acc j))
                                       (mod 10))]
                       {:sum new-sum
                        :val (conj val new-sum)}))
                   {:val []
                    :sum 0}
                   (range shift))
                 :val))
           input
           (range 100))
         (reverse)
         (take 8)
         (str/join ""))))

(comment
  (p1 "59796332430280528211060657577039744056609636505111313336094865900635343682296702094018432765613019371234483818415934914575717134617783515237300919201989706451524069044921384738930172026234872525254689609787752401342687098918804210494391161531008341329016626922990938854681575317559821067933058630688365067790812341475168200215494963690593873250884807840611487288560291748414160551508979374335267106414602526249401281066501677212002980616711058803845336067123298983258010079178111678678796586176705130938139337603538683803154824502761228184209473344607055926120829751532887810487164482307564712692208157118923502010028250886290873995577102178526942152"))

(comment
  (p2 "59796332430280528211060657577039744056609636505111313336094865900635343682296702094018432765613019371234483818415934914575717134617783515237300919201989706451524069044921384738930172026234872525254689609787752401342687098918804210494391161531008341329016626922990938854681575317559821067933058630688365067790812341475168200215494963690593873250884807840611487288560291748414160551508979374335267106414602526249401281066501677212002980616711058803845336067123298983258010079178111678678796586176705130938139337603538683803154824502761228184209473344607055926120829751532887810487164482307564712692208157118923502010028250886290873995577102178526942152" 520367))

(comment
  (p2 "03036732577212944063491565474664" 16327))

(comment
  (->> (str/split "59796332430280528211060657577039744056609636505111313336094865900635343682296702094018432765613019371234483818415934914575717134617783515237300919201989706451524069044921384738930172026234872525254689609787752401342687098918804210494391161531008341329016626922990938854681575317559821067933058630688365067790812341475168200215494963690593873250884807840611487288560291748414160551508979374335267106414602526249401281066501677212002980616711058803845336067123298983258010079178111678678796586176705130938139337603538683803154824502761228184209473344607055926120829751532887810487164482307564712692208157118923502010028250886290873995577102178526942152" #"")
       (map #(Integer/parseInt %))
       count))